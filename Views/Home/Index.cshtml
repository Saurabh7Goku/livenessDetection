<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Liveness Detection - Exam Verification</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: #0f172a;
            min-height: 100vh;
            padding: 20px;
            color: #e2e8f0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-top: 20px;
        }

        .header h1 {
            font-size: 32px;
            font-weight: 700;
            color: #fff;
            margin-bottom: 8px;
            letter-spacing: -0.5px;
        }

        .header p {
            color: #94a3b8;
            font-size: 15px;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 380px;
            gap: 24px;
            margin-bottom: 24px;
        }

        @@media (max-width: 1024px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
        }

        .video-section {
            background: #1e293b;
            border-radius: 16px;
            padding: 24px;
            border: 1px solid #334155;
        }

        .video-wrapper {
            position: relative;
            border-radius: 12px;
            overflow: hidden;
            background: #000;
            aspect-ratio: 4/3;
            margin-bottom: 20px;
        }

        #webcam {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transform: scaleX(-1);
            background: #000;
        }

        .video-overlay {
            position: absolute;
            top: 16px;
            left: 16px;
            right: 16px;
            bottom: 16px;
            border: 3px solid transparent;
            pointer-events: none;
            transition: all 0.3s ease;
            border-radius: 8px;
        }

        .video-overlay.detecting {
            border-color: #f59e0b;
            box-shadow: inset 0 0 0 4px rgba(245, 158, 11, 0.1);
        }

        .video-overlay.success {
            border-color: #10b981;
            box-shadow: inset 0 0 0 4px rgba(16, 185, 129, 0.1);
        }

        .video-overlay.error {
            border-color: #ef4444;
            box-shadow: inset 0 0 0 4px rgba(239, 68, 68, 0.1);
        }

        .camera-badge {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(8px);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .controls {
            display: flex;
            gap: 12px;
        }

        .btn {
            flex: 1;
            padding: 14px 24px;
            border: none;
            border-radius: 10px;
            font-size: 15px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(99, 102, 241, 0.3);
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
        }

        .btn-success:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(16, 185, 129, 0.4);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none !important;
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .card {
            background: #1e293b;
            border-radius: 16px;
            padding: 24px;
            border: 1px solid #334155;
        }

        .card-header {
            font-size: 16px;
            font-weight: 600;
            color: #fff;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .status-grid {
            display: flex;
            flex-direction: column;
            gap: 14px;
        }

        .status-row {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: #0f172a;
            border-radius: 10px;
            border: 1px solid #334155;
            transition: all 0.2s ease;
        }

        .status-icon {
            width: 36px;
            height: 36px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            flex-shrink: 0;
            font-weight: 600;
        }

        .status-icon.pending {
            background: #334155;
            color: #64748b;
        }

        .status-icon.checking {
            background: rgba(245, 158, 11, 0.15);
            color: #f59e0b;
        }

        .status-icon.success {
            background: rgba(16, 185, 129, 0.15);
            color: #10b981;
        }

        .status-icon.error {
            background: rgba(239, 68, 68, 0.15);
            color: #ef4444;
        }

        .status-content {
            flex: 1;
        }

        .status-label {
            font-size: 13px;
            color: #94a3b8;
            margin-bottom: 2px;
        }

        .status-value {
            font-size: 14px;
            font-weight: 500;
            color: #e2e8f0;
        }

        .instructions-list {
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .instructions-list li {
            display: flex;
            align-items: start;
            gap: 12px;
            font-size: 14px;
            line-height: 1.6;
            color: #cbd5e1;
        }

        .instructions-list li::before {
            content: "→";
            color: #6366f1;
            font-weight: bold;
            flex-shrink: 0;
        }

        .alert {
            padding: 16px 20px;
            border-radius: 12px;
            font-size: 14px;
            line-height: 1.6;
            display: none;
            align-items: start;
            gap: 12px;
            border: 1px solid;
            animation: slideIn 0.3s ease;
        }

        @@keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .alert.show {
            display: flex;
        }

        .alert.info {
            background: rgba(59, 130, 246, 0.1);
            border-color: rgba(59, 130, 246, 0.3);
            color: #93c5fd;
        }

        .alert.success {
            background: rgba(16, 185, 129, 0.1);
            border-color: rgba(16, 185, 129, 0.3);
            color: #6ee7b7;
        }

        .alert.error {
            background: rgba(239, 68, 68, 0.1);
            border-color: rgba(239, 68, 68, 0.3);
            color: #fca5a5;
        }

        .alert.warning {
            background: rgba(245, 158, 11, 0.1);
            border-color: rgba(245, 158, 11, 0.3);
            color: #fcd34d;
        }

        .alert-icon {
            font-size: 18px;
            flex-shrink: 0;
        }

        .spinner {
            width: 16px;
            height: 16px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top-color: white;
            border-radius: 50%;
            animation: spin 0.6s linear infinite;
        }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .hidden {
            display: none !important;
        }

        .badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            background: rgba(99, 102, 241, 0.15);
            color: #a5b4fc;
            border: 1px solid rgba(99, 102, 241, 0.3);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>Identity Verification</h1>
            <p>Exam Form - Liveness Detection System</p>
        </div>

        <div id="alertBox" class="alert"></div>

        <div class="main-grid">
            <div class="video-section">
                <div class="video-wrapper">
                    <video id="webcam" autoplay playsinline width="640" height="480"></video>
                    <div id="overlay" class="video-overlay"></div>
                    <div class="camera-badge hidden" id="cameraBadge">
                        <div class="status-dot"></div>
                        <span>Live</span>
                    </div>
                </div>
                <select id="deviceSelect"
                    style="width: 100%; padding: 10px; margin-bottom: 12px; background: #0f172a; color: #e2e8f0; border: 1px solid #334155; border-radius: 8px; font-size: 14px;">
                </select>

                <div class="controls">
                    <button id="startBtn" class="btn btn-primary">
                        <span>▶</span>
                        Start Camera
                    </button>
                    <button id="captureBtn" class="btn btn-success hidden" disabled>
                        <div class="spinner hidden" id="spinner"></div>
                        <span id="captureText">Capture & Verify</span>
                    </button>
                </div>
            </div>

            <div class="sidebar">
                <div class="card">
                    <div class="card-header">
                        <span>📋</span>
                        Verification Status
                    </div>
                    <div class="status-grid">
                        <div class="status-row">
                            <div id="faceIcon" class="status-icon pending">?</div>
                            <div class="status-content">
                                <div class="status-label">Face Detection</div>
                                <div id="faceText" class="status-value">Waiting...</div>
                            </div>
                        </div>
                        <div class="status-row">
                            <div id="countIcon" class="status-icon pending">?</div>
                            <div class="status-content">
                                <div class="status-label">Person Count</div>
                                <div id="countText" class="status-value">Checking...</div>
                            </div>
                        </div>
                        <div class="status-row">
                            <div id="blurIcon" class="status-icon pending">?</div>
                            <div class="status-content">
                                <div class="status-label">Image Clarity</div>
                                <div id="blurText" class="status-value">Analyzing...</div>
                            </div>
                        </div>
                        <div class="status-row">
                            <div id="livenessIcon" class="status-icon pending">?</div>
                            <div class="status-content">
                                <div class="status-label">Liveness Check</div>
                                <div id="livenessText" class="status-value">Pending...</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <span>💡</span>
                        Instructions
                    </div>
                    <ul class="instructions-list">
                        <li>Position your face clearly in frame</li>
                        <li>Ensure adequate lighting</li>
                        <li>Remove masks and sunglasses</li>
                        <li>Only one person in frame</li>
                        <li>Keep camera steady</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script>
        let stream = null;
        let currentDeviceId = null;
        let isProcessing = false;
        let verificationInterval = null;
        let blinkCount = 0;
        let previousEyeState = null;
        let allChecksPassedOnce = false;
        let autoCapturePending = false;

        const webcam = document.getElementById('webcam');
        const startBtn = document.getElementById('startBtn');
        const captureBtn = document.getElementById('captureBtn');
        const overlay = document.getElementById('overlay');
        const alertBox = document.getElementById('alertBox');
        const spinner = document.getElementById('spinner');
        const cameraBadge = document.getElementById('cameraBadge');
        const captureText = document.getElementById('captureText');

        const statusElements = {
            face: { icon: document.getElementById('faceIcon'), text: document.getElementById('faceText') },
            count: { icon: document.getElementById('countIcon'), text: document.getElementById('countText') },
            blur: { icon: document.getElementById('blurIcon'), text: document.getElementById('blurText') },
            liveness: { icon: document.getElementById('livenessIcon'), text: document.getElementById('livenessText') }
        };

        startBtn.addEventListener('click', startWebcam);
        captureBtn.addEventListener('click', captureAndVerify);

        async function listCameras() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(d => d.kind === "videoinput");

                deviceSelect.innerHTML = videoDevices
                    .map((d, i) => `<option value="${d.deviceId}">${d.label || "Camera " + (i + 1)}</option>`)
                    .join("");
            } catch (err) {
                console.error("Error listing cameras:", err);
            }
        }


        async function startWebcam(deviceId = null) {
            try {
                // Check if MediaDevices API is supported
                if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                    throw new Error('Camera API not supported in this browser');
                }

                // Stop existing stream if any
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }

                const constraints = {
                    video: {
                        deviceId: deviceId ? { exact: deviceId } : undefined,
                        width: { ideal: 1280 },
                        height: { ideal: 720 },
                        facingMode: deviceId ? undefined : 'user'
                    },
                    audio: false
                };

                console.log('Requesting camera with constraints:', constraints); // Debug log

                stream = await navigator.mediaDevices.getUserMedia(constraints);

                console.log('Stream obtained:', stream); // Debug log

                webcam.srcObject = stream;

                // Wait for video to be ready
                await new Promise((resolve, reject) => {
                    webcam.onloadedmetadata = () => {
                        webcam.play()
                            .then(resolve)
                            .catch(reject);
                    };
                    webcam.onerror = reject;
                });

                currentDeviceId = deviceId;

                // Populate camera list after getting permission
                await listCameras();

                startBtn.classList.add('hidden');
                captureBtn.classList.remove('hidden');
                captureBtn.disabled = false;
                cameraBadge.classList.remove('hidden');

                showAlert('Camera started successfully! Position your face and click Capture & Verify.', 'success');
                startContinuousVerification();

            } catch (error) {
                console.error('Detailed camera error:', error); // Debug log

                let errorMessage = 'Unable to access camera. ';

                if (error.name) {
                    switch (error.name) {
                        case 'NotAllowedError':
                        case 'PermissionDeniedError':
                            errorMessage += 'Please grant camera permissions and refresh the page.';
                            break;
                        case 'NotFoundError':
                        case 'DevicesNotFoundError':
                            errorMessage += 'No camera device found.';
                            break;
                        case 'NotReadableError':
                        case 'TrackStartError':
                            errorMessage += 'Camera is already in use by another application.';
                            break;
                        case 'OverconstrainedError':
                            errorMessage += 'Could not find camera matching the requirements.';
                            // Try again with simpler constraints
                            if (deviceId) {
                                console.log('Retrying without device constraint...');
                                return startWebcam(null);
                            }
                            break;
                        default:
                            errorMessage += error.message || 'Unknown error occurred.';
                            break;
                    }
                } else {
                    errorMessage += error.message || 'Unknown error occurred.';
                }

                showAlert(errorMessage, 'error');
            }
        }

        async function listCameras() {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(d => d.kind === "videoinput");

                deviceSelect.innerHTML = videoDevices
                    .map((d, i) => `<option value="${d.deviceId}" ${d.deviceId === currentDeviceId ? 'selected' : ''}>${d.label || "Camera " + (i + 1)}</option>`)
                    .join("");
            } catch (err) {
                console.error("Error listing cameras:", err);
            }
        }

        // Update the event listener:
        deviceSelect.addEventListener("change", () => {
            if (stream) {
                startWebcam(deviceSelect.value);
            }
        });



        function startContinuousVerification() {
            verificationInterval = setInterval(() => {
                if (!isProcessing) {
                    performQuickCheck();
                }
            }, 2000);
        }

        async function performQuickCheck() {
            if (webcam.readyState !== webcam.HAVE_ENOUGH_DATA ||
                webcam.videoWidth === 0 || webcam.videoHeight === 0) {
                return;
            }

            const canvas = document.createElement('canvas');
            canvas.width = webcam.videoWidth;
            canvas.height = webcam.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(webcam, 0, 0);

            const imageData = canvas.toDataURL('image/jpeg', 0.8);

            try {
                const response = await fetch('/Home/ProcessFrame', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ imageData, saveImage: false })
                });

                const result = await response.json();
                updateStatusUI(result, false);

                // Blink detection logic
                detectBlink(result);

            } catch (error) {
                console.error('Quick check error:', error);
            }
        }

        function detectBlink(result) {
            // Only track blinks if all basic checks pass
            if (result.faceCount === 1 && !result.isBlurred && result.hasEyes) {

                if (!allChecksPassedOnce) {
                    allChecksPassedOnce = true;
                    showAlert('All checks passed! Please blink twice to capture.', 'info');
                }

                const currentEyeState = result.eyesOpen;

                // Detect blink: transition from open -> closed -> open
                if (previousEyeState === true && currentEyeState === false) {
                    // Eyes just closed
                    console.log('Eyes closed');
                } else if (previousEyeState === false && currentEyeState === true) {
                    // Eyes just opened (blink completed)
                    blinkCount++;
                    console.log(`Blink detected! Count: ${blinkCount}`);

                    updateStatus('liveness', 'checking', '👁', `Blink ${blinkCount}/2`);

                    if (blinkCount === 1) {
                        showAlert('Great! Blink detected (1/2). Blink once more.', 'info');
                    } else if (blinkCount >= 2 && !autoCapturePending) {
                        autoCapturePending = true;
                        updateStatus('liveness', 'success', '✓', 'Blinks verified!');
                        showAlert('Perfect! Auto-capturing in 1 second...', 'success');

                        setTimeout(() => {
                            captureAndVerify();
                        }, 1000);
                    }
                }

                previousEyeState = currentEyeState;
            } else {
                // Reset if checks fail
                if (allChecksPassedOnce) {
                    allChecksPassedOnce = false;
                    blinkCount = 0;
                    previousEyeState = null;
                    autoCapturePending = false;
                }
            }
        }

        async function captureAndVerify() {
            if (isProcessing) return;

            isProcessing = true;
            captureBtn.disabled = true;
            spinner.classList.remove('hidden');
            overlay.className = 'video-overlay detecting';

            showAlert('Processing image... Please wait.', 'warning');

            const canvas = document.createElement('canvas');
            canvas.width = webcam.videoWidth;
            canvas.height = webcam.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(webcam, 0, 0);

            const imageData = canvas.toDataURL('image/jpeg', 0.95);

            try {
                const response = await fetch('/Home/ProcessFrame', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ imageData, saveImage: true })
                });

                const result = await response.json();
                updateStatusUI(result, true);

                if (result.success) {
                    overlay.className = 'video-overlay success';
                    showAlert(`${result.message} Image saved successfully!`, 'success');

                    setTimeout(() => {
                        stopWebcam();
                        captureText.textContent = 'Verification Complete ✓';
                        captureBtn.disabled = true;
                    }, 2000);
                } else {
                    overlay.className = 'video-overlay error';
                    showAlert(result.message, 'error');
                    setTimeout(() => {
                        overlay.className = 'video-overlay';
                    }, 3000);
                }
            } catch (error) {
                overlay.className = 'video-overlay error';
                showAlert('Error processing image. Please try again.', 'error');
                console.error('Processing error:', error);
            } finally {
                isProcessing = false;
                captureBtn.disabled = false;
                spinner.classList.add('hidden');
            }
        }

        function updateStatusUI(result, isFinalCheck) {
            if (result.faceCount === 1) {
                updateStatus('face', 'success', '✓', '1 person');
            } else if (result.faceCount === 0) {
                updateStatus('face', 'error', '✗', 'No face found');
            } else {
                updateStatus('face', 'error', '✗', `${result.faceCount} faces found`);
            }

            if (result.faceCount === 1) {
                updateStatus('count', 'success', '✓', 'Valid (1 person)');
            } else if (result.faceCount > 1) {
                updateStatus('count', 'error', '✗', `Invalid (${result.faceCount} people)`);
            } else {
                updateStatus('count', 'checking', '⋯', 'Checking...');
            }

            if (!result.isBlurred && result.faceCount > 0) {
                updateStatus('blur', 'success', '✓', `Clear (${result.blurScore.toFixed(2)})`);
            } else if (result.isBlurred) {
                updateStatus('blur', 'error', '✗', `Too blurry (${result.blurScore.toFixed(2)})`);
            } else {
                updateStatus('blur', 'checking', '⋯', 'Analyzing...');
            }

            // Update liveness status with blink count
            if (!isFinalCheck) {
                if (result.hasEyes && result.faceCount === 1 && !result.isBlurred) {
                    if (blinkCount === 0) {
                        updateStatus('liveness', 'checking', '👁', 'Please blink twice');
                    } else if (blinkCount === 1) {
                        updateStatus('liveness', 'checking', '👁', 'Blink 1/2 - One more!');
                    } else {
                        updateStatus('liveness', 'success', '✓', 'Blinks verified!');
                    }
                } else if (result.faceCount === 1 && !result.hasEyes) {
                    updateStatus('liveness', 'error', '✗', 'Eyes not visible');
                } else {
                    updateStatus('liveness', 'checking', '⋯', 'Pending...');
                }
            } else {
                if (result.hasEyes && result.faceCount === 1) {
                    updateStatus('liveness', 'success', '✓', 'Real person detected');
                } else {
                    updateStatus('liveness', 'error', '✗', 'Eyes not visible');
                }
            }
        }

        function updateStatus(type, status, icon, text) {
            const el = statusElements[type];
            el.icon.className = `status-icon ${status}`;
            el.icon.textContent = icon;
            el.text.textContent = text;
        }

        function showAlert(message, type) {
            const icons = {
                info: 'ℹ️',
                success: '✓',
                error: '✗',
                warning: '⚠'
            };

            alertBox.innerHTML = `
                <span class="alert-icon">${icons[type]}</span>
                <span>${message}</span>
            `;
            alertBox.className = `alert ${type} show`;

            setTimeout(() => {
                alertBox.classList.remove('show');
            }, 5000);
        }

        function stopWebcam() {
            if (verificationInterval) {
                clearInterval(verificationInterval);
            }
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
                stream = null;
            }
            cameraBadge.classList.add('hidden');
        }

        window.addEventListener('beforeunload', stopWebcam);
    </script>
</body>

</html>